import matplotlib.pyplot as plt
from scipy import ndimage
import scipy.misc
import numpy as np
import math
import skimage.exposure
import skimage.draw
import svgwrite
import os

f = open('text.txt', 'w')
f.write("G90\nG1 Z1\nG1 X0 Y0\n")

# ---------------------------------------------------------------------------------------------------------------------
# Input and Output

INPUT_IMAGE_PATH = "001.jpg"

OUTPUT_SVG_PATH = "001.svg"

# ---------------------------------------------------------------------------------------------------------------------
# Параметры, влияющие на конечное изображение

# Меньшее число означает, что будет нарисовано больше линий.
TERMINATION_RATIO = 1.0/3.5

# Пока интенсивность цвета пикселя больше пикового значения с заданным коэффициентом, этот пиксель рассматривается как начало линии
# Большие значения - больше маленьких линий; 
# Меньшие значения приводят к тому, что линии протягиваются на большие расстояния.
LINE_CONTINUE_THRESH = 0.06

# Линии должны быть длиннее этой длины, иначе они не будут проведены.
# Меньшие значения приводят к большему числу коротких линий, детализации мелких элементов.
# Большие числа могут привести к эстетически привлекательному "эскизному" виду - потере мелких деталей.
MIN_LINE_LENGTH = 21

# Линия протягивается до тех пор, пока градиент не изменится на большее число, чем заданный угол
# Меньшие числа означают большее число коротких линий; большие числа означают большее количество длинных линий, углы срезаются.
MAX_CURVE_ANGLE_DEG = 20.0

# При рисовании линий каждый новый пиксель вносит свой вклад в направление линии
#  Большие числа означают, что линии могут поворачиваться быстрее.
LPF_ATK = 0.05

# Фильтр CLAHE (Contrast Limited Adaptive Histogogram Equalization)
# Это может помочь выявить больше деталей, особенно если на входном изображении есть большие участки яркого и темного цвета.
USE_CLAHE = True
CLAHE_KERNEL_SIZE = 32

# Gaussian blur
# Это может помочь сгенерировать более длинные линии, если входное изображение шумное.
USE_GAUSSIAN_BLUR = True
GAUSSIAN_KERNEL_SIZE = 1
# ---------------------------------------------------------------------------------------------------------------------
# Функциональная часть

def rgb2gray(rgb): #перевод в оттенки серого
    return np.dot(rgb[...,:3], [0.299, 0.587, 0.114])

def bilinearInterpolate(img, x,y):
    xfloat = x - math.floor(x) #дробная часть
    yfloat = y - math.floor(y)

    xfloor = math.floor(x) #целая часть
    yfloor = math.floor(y)

    xceil = math.ceil(x) #округление вверх
    yceil = math.ceil(y)

    if(xfloor < 0):
        xfloor = 0
    if(xceil >= img.shape[1]): #chislo stolbcov выходит за границы
        xceil = img.shape[1]-1 #chislo stolbcov - 1

    if (yfloor < 0):
        yfloor = 0
    if (yceil >= img.shape[0]):
        yceil = img.shape[0] - 1

        # окружающие пиксели
    topLeft = img[int(yfloor), int(xfloor)]
    topRight = img[int(yfloor), int(xceil)]
    bottomLeft = img[int(yceil), int(xfloor)]
    bottomRight = img[int(yceil), int(xceil)]

    topMid = xfloat * topRight + (1-xfloat) * topLeft
    botMid = xfloat * bottomRight + (1-xfloat) * bottomLeft

    mid = yfloat * botMid + (1-yfloat) * topMid #взвешенное значение 4 окружающих пикселей

    return mid

def getLineFromGradient(img, px, py, gradx, grady):
    angle = math.atan2(grady[py,px], gradx[py,px]) #

    # Линия может продолжаться вечно под заданным углом до тех пор, пока:
    # - значение Собела изменяется слишком сильно.
    # - направление градиента меняется слишком сильно (более 5 градусов(по умолчанию)).

    len_left = 0
    len_right = 0

    startx = px
    starty = py
    endx = px
    endy = py

    mangle = angle

    #проверяем направление градиента по х
    while 0 < starty < img.shape[0]-1 and 0 < startx < img.shape[1] - 1 \
            and bilinearInterpolate(img, startx, starty) > LINE_CONTINUE_THRESH * img[py, px]: #если усредненная интенсивность цвета окружающих пикселей
                                                              #больше минимальной, рисуем линию дальше

        len_left += 1

        cangle = math.atan2(grady[int(round(starty)), int(round(startx))],
                            gradx[int(round(starty)), int(round(startx))])

        # обновление угла для поведения линий, схожего с кривыми
        mangle = mangle * (1-LPF_ATK) + cangle * LPF_ATK

        if abs(angle - mangle) > MAX_CURVE_ANGLE_DEG * (2 * math.pi / 360): #если угол больше мах, выходим из цикла
            break

        startx = pIdxCol + len_left * math.sin(mangle)
        starty = pIdxRow - len_left * math.cos(mangle)

    mangle = angle

    #проверяем направление градиента по y
    while 0 < endy < img.shape[0]-1 and 0 < endx < img.shape[1] - 1 \
            and bilinearInterpolate(img, endx, endy) > LINE_CONTINUE_THRESH * img[py, px]:

        len_right += 1

        cangle = math.atan2(grady[int(round(endy)), int(round(endx))],
                            gradx[int(round(endy)), int(round(endx))])

        # обновление угла для поведения линий, схожего с кривыми
        mangle = mangle * (1 - LPF_ATK) + cangle * LPF_ATK

        if abs(angle - mangle) > MAX_CURVE_ANGLE_DEG * (2 * math.pi / 360):
            break

        endx = pIdxCol - len_right * math.sin(mangle)
        endy = pIdxRow + len_right * math.cos(mangle)

    return int(round(startx)), int(round(starty)), int(round(endx)), int(round(endy)), (len_left + len_right + 1)

dwg = svgwrite.Drawing(OUTPUT_SVG_PATH, profile='tiny')

baseImage = plt.imread(INPUT_IMAGE_PATH)
baseImageGray = rgb2gray(baseImage)

normImgGray = baseImageGray - baseImageGray.min()
normImgGray = normImgGray / normImgGray.max()

# CLAHE выделяем мелкие детали с помощью повышения контраста
if USE_CLAHE:
    normImgGray = skimage.exposure.equalize_adapthist(normImgGray, kernel_size=CLAHE_KERNEL_SIZE)

# Gaussian blur  убираем мелкие детали с помощью размытия
if USE_GAUSSIAN_BLUR:
    normImgGray = scipy.ndimage.filters.gaussian_filter(normImgGray, GAUSSIAN_KERNEL_SIZE)



#выделение контуров
sobelDx = ndimage.sobel(normImgGray, 0)  # по горизонтали
sobelDy = ndimage.sobel(normImgGray, 1)  # по вертикали
mag = np.hypot(sobelDx, sobelDy)


# где изображение локально темнее на низких частотах, повышается вероятность проведения линии.
imgBlur = scipy.ndimage.filters.gaussian_filter(normImgGray, 2)

mag = np.multiply(mag, imgBlur.max()-imgBlur)

# превратить mag в функцию распределения вероятностей
mag = mag / np.sum(mag)

magGradY, magGradX = np.gradient(normImgGray) #вычисление градиентов по осям


lineImg = np.zeros(mag.shape)
lineImg = lineImg - 1

anglehist = []
linehist = []


outImg = np.zeros(mag.shape, dtype=np.uint8) #матрица из 0 типа от 0 до 250

initmaxp = mag.max() #мах вероятность
cmax = initmaxp
i = 0

llacc = 0.0
llcnt = 0.0
minll = 1e9
maxll = 0

while cmax > initmaxp*TERMINATION_RATIO: #пока вероятность проведения больше определенного порога, чертим линию
    i = i+1
    if i % 250 == 0:
        print ("Max P: ", mag.max(), " term at:", initmaxp*TERMINATION_RATIO)
        print ("Line Stats: N=", llcnt, "length: min", minll, "mean", llacc/llcnt, "max", maxll)
        llacc = 0
        llcnt = 0
        minll = 99999
        maxll = 0

    pixIdx = mag.argmax() #индекс мах значения

    pIdxRow = int(pixIdx / mag.shape[1]) #коорд х
    pIdxCol = pixIdx % mag.shape[1] #коорд у

    cmax = mag[pIdxRow, pIdxCol]

    (lstartx, lstarty, lendx, lendy, totalLength) = getLineFromGradient(mag, pIdxCol, pIdxRow, magGradX, magGradY)

    if totalLength < MIN_LINE_LENGTH:
        # если длина меньше заданного значения, линия не рисуется. #
        # Мы не хотим укорачивать другие линии, так что замените это максимальное значение вероятности 
        # на (гарантированно меньшее) - среднее значение его соседей. Пиковым значением становится другой пиксель
        acc = 0.0
        cnt = 0
        if pIdxRow+1 < mag.shape[0]:
            acc = acc + mag[pIdxRow+1, pIdxCol]
            cnt = cnt+1

        if pIdxCol + 1 < mag.shape[1]:
            acc = acc + mag[pIdxRow, pIdxCol+1]
            cnt = cnt + 1

        if pIdxRow - 1 >= 0:
            acc = acc + mag[pIdxRow - 1, pIdxCol]
            cnt = cnt + 1

        if pIdxCol - 1 >= 0:
            acc = acc + mag[pIdxRow, pIdxCol - 1]
            cnt = cnt + 1

        mag[pIdxRow, pIdxCol] = acc / cnt

        continue

    # рисуем линию в конечном файле
    dwg.add(dwg.line((lstartx, lstarty), (lendx, lendy), stroke=svgwrite.rgb(0, 0, 0, '%')))
    f.write('G1 X' + str(lstartx) + ' Y' + str(lstarty) + '\nG1 Z0\n')
    f.write('G1 X' + str(lendx) + ' Y' + str(lendy) + '\nG1 Z1\n')
    # collect line statistics:

    # счетчик для значений и кол-ва линий
    llacc = llacc + totalLength
    llcnt = llcnt + 1

    # min/max длина линий
    if totalLength < minll:
        minll = totalLength

    if totalLength > maxll:
        maxll = totalLength

    

    rr, cc, val = skimage.draw.line_aa(lstarty, lstartx, lendy, lendx)
    rrd, ccd = skimage.draw.line(lstarty, lstartx, lendy, lendx)

    rr[rr < 0] = 0
    rr[rr >= mag.shape[0]] = mag.shape[0]-1

    cc[cc < 0] = 0
    cc[cc >= mag.shape[1]] = mag.shape[1] - 1

    rrd[rrd < 0] = 0
    rrd[rrd >= mag.shape[0]] = mag.shape[0] - 1

    ccd[ccd < 0] = 0
    ccd[ccd >= mag.shape[1]] = mag.shape[1] - 1

    # рисует линию в изображении для показа результата в конце программы.
    outImg[rrd, ccd] = 255

    
    mag[rr, cc] = 0
    mag[pIdxRow, pIdxCol] = 0  # сбивает пиковую интенсивность цвета, которая создала эту линию, чтобы линии не дублировались

outImg[outImg > 255] = 255

outImg = -1*outImg + 255

dwg.save()

plt.imshow(outImg, cmap='gray')
plt.show()

f.close()

os.rename('text.txt', 'text.gcode')
